import re

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from keybords.inline_keyboards import days_keyboard, lessons_keyboard, week_keyboard, teachers_days_keyboard, \
    cancel_keyboard
from gs.gs_api import get_by_day, get_by_group, get_free_classroom, get_by_teacher, get_teacher_by_day, \
    check_colon_with_spaces

router = Router()


class Form(StatesGroup):
    select_group = State()
    select_day = State()
    select_lesson = State()
    select_teacher = State()


@router.message(F.text == "üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def start_schedule(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã"
                         "\n–ù–∞–ø–∏—Ä–∏–º–µ—Ä –ò–í–¢-13–ë–û:")
    await state.set_state(Form.select_group)


@router.message(Form.select_group)
async def process_group(message: types.Message, state: FSMContext):
    await state.update_data(group=message.text, id=message.from_user.id)
    await message.answer("üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=week_keyboard)
    await state.set_state(Form.select_day)


@router.callback_query(F.data.startswith("week_"), Form.select_day)
async def process_day(callback: types.CallbackQuery, state: FSMContext):
    day = callback.data.split("_")[1]
    data = await state.get_data()

    try:
        if day == "–Ω–µ–¥–µ–ª—è":
            schedule = get_by_group(data['group'])
        else:
            schedule = get_by_day(data['group'], day)
        response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {data['group']} ({day.capitalize()}):\n\n"

        for item in schedule:
            if type(item) is str:
                # if not re.search(r':[^-]*-', response):
                #     response += "–ü–ê–† –ù–ï–¢\n"
                response += f"{item}:\n\n"
            else:
                if item[0][1] or (item[0][1] == "" and item[1] != "full"):
                    if item[1] == "first":
                        response += "--------------\n"
                        response += f"‚è∞ <b>{item[0][0]}/–ß–∏—Å–ª–∏—Ç–µ–ª—å</b>: {item[0][1]} - <b>–ß–∏—Å–ª–∏—Ç–µ–ª—å</b>\n\n"
                    elif item[1] == "second":
                        response += f"‚è∞ <b>{item[0][0]}/–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å</b>: {item[0][1]} - <b>–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å</b>\n"
                        response += "--------------\n"
                    else:
                        response += f"‚è∞ <b>{item[0][0]}</b>: {item[0][1]}\n\n"
            if check_colon_with_spaces(response):
                response += "–ü–ê–† –ù–ï–¢"

        await callback.message.edit_text(text=response, parse_mode="HTML")
        await state.clear()

    except Exception as e:
        await callback.message.edit_text(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:",
            reply_markup=cancel_keyboard)
        await state.set_state(Form.select_group)


@router.message(F.text == "üö™ –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
async def start_free_classrooms(message: types.Message, state: FSMContext):
    await message.answer("üìÖ –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_keyboard)
    await state.set_state(Form.select_day)


@router.callback_query(F.data.startswith("day_"), Form.select_day)
async def process_free_day(callback: types.CallbackQuery, state: FSMContext):
    day = callback.data.split("_")[1]
    await state.update_data(day=day)
    await callback.message.edit_text("üî¢ –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", reply_markup=lessons_keyboard)
    await state.set_state(Form.select_lesson)


@router.callback_query(F.data.startswith("lesson_"), Form.select_lesson)
async def process_lesson(callback: types.CallbackQuery, state: FSMContext):
    lesson_number = int(callback.data.split("_")[1])
    data = await state.get_data()

    try:
        time, free_rooms = get_free_classroom(data['day'], lesson_number)
        response = (
            f"üö™ –°–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:\n"
            f"üìÖ –î–µ–Ω—å: {data['day'].capitalize()}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time}\n\n"
        )

        for room in free_rooms:
            response += f"üîë –ê—É–¥. {room[0]}\n"
            if room[1]:
                response += f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{room[1]}\n\n"
            else:
                response += f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"

        await callback.message.edit_text(response)
        await state.clear()

    except Exception as e:
        await callback.message.edit_text("‚ùå‚ùå‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        await state.clear()


@router.message(F.text == "üë©‚Äçüíª –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
async def start_teacher(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
                         "\n–ù–∞–ø–∏—Ä–∏–º–µ—Ä –ò–≤–∞–Ω–æ–≤ –ò.–ò. –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Form.select_teacher)


@router.message(Form.select_teacher)
async def process_teacher(message: types.Message, state: FSMContext):
    await state.update_data(teacher=message.text, id=message.from_user.id)
    await message.answer("üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=teachers_days_keyboard)
    await state.set_state(Form.select_day)


@router.callback_query(F.data.startswith("teach_"), Form.select_day)
async def process_teacher_day(callback: types.CallbackQuery, state: FSMContext):
    day = callback.data.split("_")[1]
    data = await state.get_data()

    try:
        if day == "–Ω–µ–¥–µ–ª—è":
            schedule = get_by_teacher(data['teacher'])
        else:
            schedule = get_teacher_by_day(data['teacher'], day)
        response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {data['teacher']} ({day.capitalize()}):\n\n"

        for item in schedule:
            if type(item) is str:
                # if not re.search(r':[^-]*-', response):
                #     response += "–ü–ê–† –ù–ï–¢\n"
                response += f"- {item}:\n\n"
            else:
                if item[0][1] or (item[0][1] == "" and item[1] != "full"):
                    if item[1] == "first":
                        response += "--------------\n"
                        response += f"‚è∞ <b>{item[0][0]}/–ß–∏—Å–ª–∏—Ç–µ–ª—å</b>: {item[0][1]} - <b>–ß–∏—Å–ª–∏—Ç–µ–ª—å</b>\n\n"
                    elif item[1] == "second":
                        response += f"‚è∞ <b>{item[0][0]}/–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å</b>: {item[0][1]} - <b>–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å</b>\n"
                        response += "--------------\n"
                    else:
                        response += f"‚è∞ <b>{item[0][0]}</b>: {item[0][1]}\n\n"
            if check_colon_with_spaces(response):
                response += "–ü–ê–† –ù–ï–¢"

        await callback.message.edit_text(text=response, parse_mode="HTML")
        await state.clear()

    except Exception as e:
        await callback.message.edit_text(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å –§–ò–û\n–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:",
            reply_markup=cancel_keyboard)
        await state.set_state(Form.select_teacher)


@router.callback_query(F.data.startswith("cancel"))
async def cancel(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(f"–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
