from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from gs.db import add_to_db
from keybords.inline_keyboards import days_keyboard, lessons_keyboard, week_keyboard
from gs.gs_api import get_by_day, get_by_group, get_free_classroom

router = Router()


class Form(StatesGroup):
    select_group = State()
    select_day = State()
    select_lesson = State()


@router.message(F.text == "üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def start_schedule(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã"
                         "\n–ù–∞–ø–∏—Ä–∏–º–µ—Ä –ò–í–¢-13–ë–û:")
    await state.set_state(Form.select_group)


@router.message(Form.select_group)
async def process_group(message: types.Message, state: FSMContext):

    await state.update_data(group=message.text, id=message.from_user.id)
    await message.answer("üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=week_keyboard)
    await state.set_state(Form.select_day)


@router.callback_query(F.data.startswith("week_"), Form.select_day)
async def process_day(callback: types.CallbackQuery, state: FSMContext):
    day = callback.data.split("_")[1]
    data = await state.get_data()

    try:
        await add_to_db(data["id"], data["group"])
        if day == "–Ω–µ–¥–µ–ª—è":
            schedule = get_by_group(data['group'])
        else:
            schedule = get_by_day(data['group'], day)
        response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {data['group']} ({day.capitalize()}):\n\n"

        for item in schedule:
            if type(item) == str:
                response += f"{item}\n\n"
            else:
                if item[1]:
                    response += f"‚è∞ {item[0]}: {item[1]}\n\n"

        await callback.message.edit_text(response)
        await state.clear()

    except Exception as e:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
        await state.clear()


@router.message(F.text == "üö™ –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
async def start_free_classrooms(message: types.Message, state: FSMContext):
    await message.answer("üìÖ –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_keyboard)
    await state.set_state(Form.select_day)


@router.callback_query(F.data.startswith("day_"), Form.select_day)
async def process_free_day(callback: types.CallbackQuery, state: FSMContext):
    day = callback.data.split("_")[1]
    await state.update_data(day=day)
    await callback.message.edit_text("üî¢ –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", reply_markup=lessons_keyboard)
    await state.set_state(Form.select_lesson)


@router.callback_query(F.data.startswith("lesson_"), Form.select_lesson)
async def process_lesson(callback: types.CallbackQuery, state: FSMContext):
    lesson_number = int(callback.data.split("_")[1])
    data = await state.get_data()

    try:
        time, free_rooms = get_free_classroom(data['day'], lesson_number)
        response = (
            f"üö™ –°–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:\n"
            f"üìÖ –î–µ–Ω—å: {data['day'].capitalize()}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time}\n\n"
        )

        for room in free_rooms:
            response += f"üîë –ê—É–¥. {room[0]}\n"
            if room[1]:
                response += f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{room[1]}\n\n"
            else:
                response += f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"

        await callback.message.edit_text(response)
        await state.clear()

    except Exception as e:
        await callback.message.edit_text("‚ùå‚ùå‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        await state.clear()
