from aiogram import Router, types
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from gs.db import add_to_db, del_from_db, get_groups_by_user_id, del_all_from_db
from gs.gs_api import get_groups, group_match
from keybords.reply_keyboards import main_keyboard
from states.states import Form

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
             "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π!\n"
             "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(text=(""
                               "üéì *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"

                               "üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:*\n"
                               "1. –í—ã–±–µ—Ä–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª\n"
                               "2. –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n"
                               "3. –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n\n"

                               "üö™ *–°–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:*\n"
                               "1. –ù–∞–∂–º–∏ ¬´–ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏¬ª\n"
                               "2. –£–∫–∞–∂–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n"
                               "3. –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã\n\n"

                               "üë©üè´ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:*\n"
                               "1. –í—ã–±–µ—Ä–∏ ¬´–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π¬ª\n"
                               "2. –í–≤–µ–¥–∏ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: *–ò–≤–∞–Ω–æ–≤ –ê.–ê.*)\n"
                               "3. –£–∫–∞–∂–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n\n"

                               "üîî *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:*\n"
                               "1. –í–≤–µ–¥–∏ `/sub [–≥—Ä—É–ø–ø–∞]` (–ø—Ä–∏–º–µ—Ä: `/sub –ò–í–¢-11`)\n"
                               "2. *–í–∞–∂–Ω–æ:* –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É\n\n"

                               "üîï *–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
                               "1. –í–≤–µ–¥–∏ `/unsub`\n"
                               "2. –í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞")
                         )


@router.message(Command("sub"))
async def cmd_sub(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(text="–£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
    await state.set_state(Form.pre_sub)


@router.message(Command("unsub"))
async def cmd_unsub(message: types.Message, state: FSMContext):
    await state.clear()
    subs = await get_groups_by_user_id(message.from_user.id)
    try:
        if subs:
            keyboard = []
            for i in range(0, len(subs), 2):
                row = subs[i:i + 2]
                keyboard_row = [
                    InlineKeyboardButton(text=name, callback_data=name)
                    for name in row
                ]
                keyboard.append(keyboard_row)
            keyboard.append([
                InlineKeyboardButton(text="–í—Å–µ", callback_data="all")
            ])
            await message.answer(
                text="–û—Ç –∫–æ–≥–æ –≤—ã—Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            await state.set_state(Form.unsub)
        else:
            raise Exception("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
    except Exception as e:
        await message.answer(
            text=f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫")
        await state.clear()


@router.message(Form.pre_sub)
async def ft_cmd_sub(message: types.Message, state: FSMContext):
    try:
        match = group_match(message.text)
        if len(match) > 1:
            keyboard = []
            for i in range(0, len(match), 2):
                row = match[i:i + 2]
                keyboard_row = [
                    InlineKeyboardButton(text=name, callback_data=name)
                    for name in row
                ]
                keyboard.append(keyboard_row)
            await message.answer(
                text="–£—Ç–æ—á–Ω–∏—Ç–µ –≥—Ä—É–ø–ø—É",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            await state.set_state(Form.sub)
        elif len(match) == 1:
            await add_to_db(message.from_user.id, match[0])
            await message.answer(text=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—É–ø–ø—ã - {match[0]}")
            await state.clear()
        else:
            raise Exception("–ì—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
    except Exception as e:
        await message.answer(
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ:")
        await state.set_state(Form.pre_sub)


@router.callback_query(Form.sub)
async def match_sub(callback: types.CallbackQuery, state: FSMContext):
    group = callback.data
    await add_to_db(callback.from_user.id, group)
    await callback.message.edit_text(text=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã - {group}")
    await state.clear()


@router.callback_query(Form.unsub)
async def match_unsub(callback: types.CallbackQuery, state: FSMContext):
    group = callback.data
    if group == "all":
        await del_all_from_db(callback.from_user.id)
        await callback.message.edit_text(text=f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö –≥—Ä—É–ø–ø")
        await state.clear()
    else:
        await del_from_db(callback.from_user.id, group)
        await callback.message.edit_text(text=f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {group}")
        await state.clear()
